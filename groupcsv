#! /usr/bin/env python

import sys
import getopt
import csv
import collections
import heapq
import itertools
import os.path

optlist, groupfields = getopt.getopt(sys.argv[1:], 'k:v:d:s')

if len(groupfields) == 0:
	print "Usage: " + os.path.basename(sys.argv[0]) + " [-k KEY_FIELD] [-v VALUE_FIELD] [-d GROUP_NAME_SEPARATOR] [-s] FIELD... <INPUT.csv >OUTPUT.csv"
	sys.exit(1)

opts = dict(optlist)
keyfield = opts.get('-k', '@timestamp')
valuefield = opts.get('-v', None)
separator = opts.get('-d', ' / ')
merge = not '-s' in opts

reader = csv.DictReader(sys.stdin)

# Atomic batteries to power. Turbines to kludge.
if (valuefield is None):
	for field in reader.fieldnames:
		if (field != keyfield and field not in groupfields):
			valuefield = field
			break

groups = collections.defaultdict(list)

for row in reader:
	groupkey = tuple(row[f] for f in groupfields)
	groups[groupkey].append((row[keyfield], row[valuefield]))

def groupname(groupkey):
	return separator.join(groupkey)

sortablegroups = []

def sortablegroup(groupkey, group):
	return ((key, {keyfield: key, groupname(groupkey): value}) for key, value in group)

for groupkey, group in groups.iteritems():
	group.sort()
	sortablegroups.append(sortablegroup(groupkey, group))

sortedgroups = heapq.merge(*sortablegroups)

def mergegroups(kd):
	prevkey = None
	mergedfields = {}
	for key, fields in itertools.chain(kd, [(None, {})]):
		if (key != prevkey):
			if (prevkey is not None):
				yield (prevkey, mergedfields)
			prevkey = key
			mergedfields = {}
		mergedfields.update(fields)

if (merge):
	sortedgroups = mergegroups(sortedgroups)

writer = csv.DictWriter(sys.stdout, [keyfield] + list(groupname(gk) for gk in sorted(groups.iterkeys())))
writer.writeheader()
for key, row in sortedgroups:
	writer.writerow(row)

